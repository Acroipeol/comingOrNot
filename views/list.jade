doctype html
html
  //
    purpose of the file:
    1. Page for Choosing the configurations like vpc , security group and number of worker instances
    2. gets the vpc,sg, and aws details from research.js
    3. submits the details to partial.js
    4. redirects to playbook execution page or launching of system page
    author: Lakshman Diwaakar (fx30540)
    mail-id: Lakshman.Diwaakar@fujixerox.co.jp
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    script(type='text/javascript').
      var vpc_sgs;
      function getData() {
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function () {
      if( xhr.readyState == 4  && xhr.status == 200) {
      vpc_sgs = JSON.parse(xhr.response);
      // console.log(vpc_sgs.arr[8].sg);
      var select = document.getElementById("selectvpc");
      var length = select.options.length;
      console.log(length);
      if (length > 0) {
      console.log("coming here");
      for (var i=0; i<length; i++) {
      select.options[i] = null;
      }
      }
      for(var i=0; i<vpc_sgs.arr.length; i++ ) {
      var opt = vpc_sgs.arr[i].vpcName;
      var el = document.createElement("option");
      el.textContent = opt;
      el.value = opt;
      select.appendChild(el);
      }
      }
      }
      var url = !{url} + "/research";
      xhr.open("GET", url, true);
      xhr.send();
      }
      function postData() {
      var vpc = document.getElementById("selectvpc").value;
      var pubsec = document.getElementsByName("security");
      var privsec = document.getElementsByName("privatesecurity");
      var count = document.getElementById("count").value;
      var sgs = [];
      var sg1,sg2;
      for (var i = 0; i < pubsec.length; i++) {
      if (pubsec[i].checked) {
      sg1 = pubsec[i].labels[0].childNodes[1].data;
      }
      }
      for (var j = 0; j < privsec.length; j++) {
      if (privsec[j].checked) {
      sg2 = privsec[j].labels[0].childNodes[1].data;
      }
      }
      // console.log(sg1);
      // console.log(sg2);
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function() {
      if (xhr.readyState == 4) {
      window.location = !{url} + "/showrunplaybook"
      }
      }
      var url = !{url} + "/partial?vpc=" + vpc +"&sg1=" + sg1 +"&sg2=" + sg2 + "&count=" + count;
      xhr.open("POST", url, true);
      xhr.send();
      }
      function postDataScratch() {
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function() {
      if (xhr.readyState == 4) {
      window.location = !{url} + "/showrunplaybook"
      }
      }
      var url = !{url} + "/partial?scratch=yes";
      xhr.open("POST", url, true);
      xhr.send();
      }
      var selected_vpc;
      var sgs;
      function putCheckBox() {
      document.getElementById("public").innerHTML = '';
      var center = document.createElement("center");
      var h4 = document.createElement("h3");
      var inbound_rules = document.createTextNode("Select a Public Security Group ");
      h4.appendChild(inbound_rules);
      center.appendChild(h4);
      document.getElementById("public").appendChild(center);
      document.getElementById("public").appendChild(document.createElement("br"));
      document.getElementById("private").innerHTML = '';
      var center = document.createElement("center");
      var h4 = document.createElement("h3");
      var inbound_rules = document.createTextNode("Select a Private Security Group ");
      h4.appendChild(inbound_rules);
      center.appendChild(h4);
      document.getElementById("private").appendChild(center);
      document.getElementById("private").appendChild(document.createElement("br"));
      document.getElementById("checkboxPopulate").innerHTML = '';
      var center = document.createElement("center");
      var h4 = document.createElement("h4");
      var inbound_rules = document.createTextNode("Security Groups");
      h4.appendChild(inbound_rules);
      center.appendChild(h4);
      document.getElementById("checkboxPopulate").appendChild(center);
      document.getElementById("checkboxPopulate2").innerHTML = '';
      var center = document.createElement("center");
      var h4 = document.createElement("h4");
      var inbound_rules = document.createTextNode("Security Groups");
      h4.appendChild(inbound_rules);
      center.appendChild(h4);
      document.getElementById("checkboxPopulate2").appendChild(center);
      selected_vpc = document.getElementById("selectvpc").value;
      sgs = [];
      for(var i=0; i<vpc_sgs.arr.length; i++ ) {
      if(vpc_sgs.arr[i].vpcName == selected_vpc) {
      sgs = vpc_sgs.arr[i].sg;
      }
      }
      for(var j= 0;j < sgs.length; j++) {
      var label = document.createElement("label");
      var description = document.createTextNode(sgs[j].GroupName);
      var checkbox = document.createElement("input");
      checkbox.addEventListener("click", populateRules);
      // console.log(sgs[j].GroupName);
      checkbox.type = "radio";
      checkbox.name = "security";
      checkbox.value = sgs[j].GroupName;
      label.appendChild(checkbox);
      label.appendChild(description);
      document.getElementById("checkboxPopulate").appendChild(label);
      document.getElementById("checkboxPopulate").appendChild(document.createElement("br"));
      }
      for(var j= 0;j < sgs.length; j++) {
      var label = document.createElement("label");
      var description = document.createTextNode(sgs[j].GroupName);
      var checkbox = document.createElement("input");
      checkbox.addEventListener("click", populateRules2);
      // console.log(sgs[j].GroupName);
      checkbox.type = "radio";
      checkbox.name = "privatesecurity";
      checkbox.value = sgs[j].GroupName;
      label.appendChild(checkbox);
      label.appendChild(description);
      document.getElementById("checkboxPopulate2").appendChild(label);
      document.getElementById("checkboxPopulate2").appendChild(document.createElement("br"));
      }
      }
      function populateRules() {
      document.getElementById("showrules").innerHTML = '';
      var centre = document.createElement("centre");
      var h4 = document.createElement("h4");
      var inbound_rules = document.createTextNode("Inbound Rules");
      h4.appendChild(inbound_rules);
      document.getElementById("showrules").appendChild(h4);
      var table = document.createElement("table");
      table.className = "search-table";
      table.style.width = "100%";
      table.setAttribute("border", "1");
      var tablebody1 = document.createElement("tbody");
      var tablehead = document.createElement("thead");
      var tableheadr = document.createElement("tr");
      var portth = document.createElement("th");
      portth.style.textAlign = "center";
      portth.appendChild(document.createTextNode("Port"));
      tableheadr.appendChild(portth);
      var protocolth = document.createElement("th");
      protocolth.style.textAlign = "center";
      protocolth.appendChild(document.createTextNode("Protocol"));
      tableheadr.appendChild(protocolth);
      var sourceth = document.createElement("th");
      sourceth.style.textAlign = "center";
      sourceth.appendChild(document.createTextNode("Source"));
      tableheadr.appendChild(sourceth);
      tablehead.appendChild(tableheadr);
      table.appendChild(tablehead);
      // outbound table creation
      var table_out = document.createElement("table");
      table_out.className = "search-table";
      table_out.style.width = "100%";
      table_out.setAttribute("border", "1");
      var tablebody1_out = document.createElement("tbody");
      var tablehead_out = document.createElement("thead");
      var tableheadr_out = document.createElement("tr");
      var portth_out = document.createElement("th");
      portth_out.style.textAlign = "center";
      portth_out.appendChild(document.createTextNode("Port"));
      tableheadr_out.appendChild(portth_out);
      var protocolth_out = document.createElement("th");
      protocolth_out.style.textAlign = "center";
      protocolth_out.appendChild(document.createTextNode("Protocol"));
      tableheadr_out.appendChild(protocolth_out);
      var sourceth_out = document.createElement("th");
      sourceth_out.style.textAlign = "center";
      sourceth_out.appendChild(document.createTextNode("Source"));
      tableheadr_out.appendChild(sourceth_out);
      tablehead_out.appendChild(tableheadr_out);
      table_out.appendChild(tablehead_out);
      var radiobuttons = document.getElementsByName("security");
      var selectedradio;
      for (var i = 0; i < radiobuttons.length; i++) {
      if (radiobuttons[i].checked) {
      selectedradio = radiobuttons[i].value;
      }
      }
      for (var j = 0; j < sgs.length; j++) {
      if (selectedradio == sgs[j].GroupName) {
      for (var k = 0; k < sgs[j].IpPermissions.length; k++) {
      var port, source='', flag=0, protocol;
      protocol = sgs[j].IpPermissions[k].IpProtocol;
      if (sgs[j].IpPermissions[k].FromPort == sgs[j].IpPermissions[k].ToPort) {
      port = sgs[j].IpPermissions[k].FromPort;
      } else if (sgs[j].IpPermissions[k].FromPort != sgs[j].IpPermissions[k].ToPort) {
      port = sgs[j].IpPermissions[k].FromPort + " - " + sgs[j].IpPermissions[k].ToPort;
      } else {
      port = "ALL";
      }
      if (typeof sgs[j].IpPermissions[k].IpRanges[0] != 'undefined') {
      for (var l = 0; l < sgs[j].IpPermissions[k].IpRanges.length; l++) {
      source+= sgs[j].IpPermissions[k].IpRanges[l].CidrIp + ",";
      }
      }
      if (typeof sgs[j].IpPermissions[k].UserIdGroupPairs[0] != 'undefined') {
      for (var m = 0; m < sgs[j].IpPermissions[k].UserIdGroupPairs.length; m++) {
      source+= sgs[j].IpPermissions[k].UserIdGroupPairs[m].GroupId + ",";
      }
      }
      if (typeof port == 'undefined') {
      port = "ALL";
      }
      if (protocol == -1) {
      protocol = "ALL";
      }
      var charq = source.split('');
      charq[charq.length - 1] = "";
      source = charq.join("");
      var tr = document.createElement("tr");
      var column_no = 0;
      var porttd = document.createElement("td");
      porttd.appendChild(document.createTextNode(port));
      // porttd.setAttribute("rowspan", "2");
      tr.appendChild(porttd);
      var protocoltd = document.createElement("td");
      protocoltd.appendChild(document.createTextNode(protocol));
      // protocoltd.setAttribute("rowspan", "2");
      tr.appendChild(protocoltd);
      var sourcetd = document.createElement("td");
      sourcetd.appendChild(document.createTextNode(source));
      // sourcetd.setAttribute("rowspan", "2");
      tr.appendChild(sourcetd);
      tablebody1.appendChild(tr);
      }
      table.appendChild(tablebody1);
      document.getElementById("showrules").appendChild(table);
      document.getElementById("showrules").appendChild(document.createElement("br"));
      var h4 = document.createElement("h4");
      var outbound_rules = document.createTextNode("Outbound Rules");
      h4.appendChild(outbound_rules);
      document.getElementById("showrules").appendChild(h4);
      for (var k = 0; k < sgs[j].IpPermissionsEgress.length; k++) {
      var port, source='', flag=0, protocol;
      protocol = sgs[j].IpPermissionsEgress[k].IpProtocol;
      if (sgs[j].IpPermissionsEgress[k].FromPort == sgs[j].IpPermissionsEgress[k].ToPort) {
      port = sgs[j].IpPermissionsEgress[k].FromPort;
      } else if (sgs[j].IpPermissionsEgress[k].FromPort != sgs[j].IpPermissionsEgress[k].ToPort) {
      port = sgs[j].IpPermissionsEgress[k].FromPort + " - " + sgs[j].IpPermissionsEgress[k].ToPort;
      } else {
      port = "ALL";
      }
      if (typeof sgs[j].IpPermissionsEgress[k].IpRanges[0] != 'undefined') {
      for (var l = 0; l < sgs[j].IpPermissionsEgress[k].IpRanges.length; l++) {
      source+= sgs[j].IpPermissionsEgress[k].IpRanges[l].CidrIp + ",";
      }
      }
      if (typeof sgs[j].IpPermissionsEgress[k].UserIdGroupPairs[0] != 'undefined') {
      for (var m = 0; m < sgs[j].IpPermissionsEgress[k].UserIdGroupPairs.length; m++) {
      source+= sgs[j].IpPermissionsEgress[k].UserIdGroupPairs[m].GroupId + ",";
      }
      }
      if (typeof port == 'undefined') {
      port = "ALL";
      }
      if (protocol == -1) {
      protocol = "ALL";
      }
      var charq = source.split('');
      charq[charq.length - 1] = "";
      source = charq.join("");
      var tr = document.createElement("tr");
      var column_no = 0;
      var porttd = document.createElement("td");
      porttd.appendChild(document.createTextNode(port));
      // porttd.setAttribute("rowspan", "2");
      tr.appendChild(porttd);
      var protocoltd = document.createElement("td");
      protocoltd.appendChild(document.createTextNode(protocol));
      // protocoltd.setAttribute("rowspan", "2");
      tr.appendChild(protocoltd);
      var sourcetd = document.createElement("td");
      sourcetd.appendChild(document.createTextNode(source));
      // sourcetd.setAttribute("rowspan", "2");
      tr.appendChild(sourcetd);
      tablebody1_out.appendChild(tr);
      // document.getElementById("showrules2").appendChild(document.createElement("br"));
      }
      table_out.appendChild(tablebody1_out);
      document.getElementById("showrules").appendChild(table_out);
      }
      }
      }
      function populateRules2() {
      document.getElementById("showrules2").innerHTML = '';
      // inbound table creation
      var centre = document.createElement("centre");
      var h4 = document.createElement("h4");
      var inbound_rules = document.createTextNode("Inbound Rules");
      h4.appendChild(inbound_rules);
      document.getElementById("showrules2").appendChild(h4);
      var table = document.createElement("table");
      table.className = "search-table";
      table.style.width = "100%";
      table.setAttribute("border", "1");
      var tablebody1 = document.createElement("tbody");
      var tablehead = document.createElement("thead");
      var tableheadr = document.createElement("tr");
      var portth = document.createElement("th");
      portth.style.textAlign = "center";
      portth.appendChild(document.createTextNode("Port"));
      tableheadr.appendChild(portth);
      var protocolth = document.createElement("th");
      protocolth.style.textAlign = "center";
      protocolth.appendChild(document.createTextNode("Protocol"));
      tableheadr.appendChild(protocolth);
      var sourceth = document.createElement("th");
      sourceth.style.textAlign = "center";
      sourceth.appendChild(document.createTextNode("Source"));
      tableheadr.appendChild(sourceth);
      tablehead.appendChild(tableheadr);
      table.appendChild(tablehead);
      // outbound table creation
      var table_out = document.createElement("table");
      table_out.className = "search-table";
      table_out.style.width = "100%";
      table_out.setAttribute("border", "1");
      var tablebody1_out = document.createElement("tbody");
      var tablehead_out = document.createElement("thead");
      var tableheadr_out = document.createElement("tr");
      var portth_out = document.createElement("th");
      portth_out.style.textAlign = "center";
      portth_out.appendChild(document.createTextNode("Port"));
      tableheadr_out.appendChild(portth_out);
      var protocolth_out = document.createElement("th");
      protocolth_out.style.textAlign = "center";
      protocolth_out.appendChild(document.createTextNode("Protocol"));
      tableheadr_out.appendChild(protocolth_out);
      var sourceth_out = document.createElement("th");
      sourceth_out.style.textAlign = "center";
      sourceth_out.appendChild(document.createTextNode("Source"));
      tableheadr_out.appendChild(sourceth_out);
      tablehead_out.appendChild(tableheadr_out);
      table_out.appendChild(tablehead_out);
      var radiobuttons = document.getElementsByName("privatesecurity");
      var selectedradio;
      for (var i = 0; i < radiobuttons.length; i++) {
      if (radiobuttons[i].checked) {
      selectedradio = radiobuttons[i].value;
      }
      }
      for (var j = 0; j < sgs.length; j++) {
      if (selectedradio == sgs[j].GroupName) {
      var cnt = 0;
      for (var k = 0; k < sgs[j].IpPermissions.length; k++) {
      var port, source='', flag=0, protocol;
      protocol = sgs[j].IpPermissions[k].IpProtocol;
      if (sgs[j].IpPermissions[k].FromPort == sgs[j].IpPermissions[k].ToPort) {
      port = sgs[j].IpPermissions[k].FromPort;
      } else if (sgs[j].IpPermissions[k].FromPort != sgs[j].IpPermissions[k].ToPort) {
      port = sgs[j].IpPermissions[k].FromPort + " - " + sgs[j].IpPermissions[k].ToPort;
      } else {
      port = "ALL";
      }
      if (typeof sgs[j].IpPermissions[k].IpRanges[0] != 'undefined') {
      for (var l = 0; l < sgs[j].IpPermissions[k].IpRanges.length; l++) {
      source+= sgs[j].IpPermissions[k].IpRanges[l].CidrIp + ",";
      }
      }
      if (typeof sgs[j].IpPermissions[k].UserIdGroupPairs[0] != 'undefined') {
      for (var m = 0; m < sgs[j].IpPermissions[k].UserIdGroupPairs.length; m++) {
      source+= sgs[j].IpPermissions[k].UserIdGroupPairs[m].GroupId + ",";
      }
      }
      if (typeof port == 'undefined') {
      port = "ALL";
      }
      if (protocol == -1) {
      protocol = "ALL";
      }
      var charq = source.split('');
      charq[charq.length - 1] = "";
      source = charq.join("");
      //           var tablebody = document.createElement("tbody");
      console.log("the k value ==" + k);
      var tr = document.createElement("tr");
      var column_no = 0;
      var porttd = document.createElement("td");
      porttd.appendChild(document.createTextNode(port));
      // porttd.setAttribute("rowspan", "2");
      tr.appendChild(porttd);
      var protocoltd = document.createElement("td");
      protocoltd.appendChild(document.createTextNode(protocol));
      // protocoltd.setAttribute("rowspan", "2");
      tr.appendChild(protocoltd);
      var sourcetd = document.createElement("td");
      sourcetd.appendChild(document.createTextNode(source));
      // sourcetd.setAttribute("rowspan", "2");
      tr.appendChild(sourcetd);
      tablebody1.appendChild(tr);
      }
      table.appendChild(tablebody1);
      document.getElementById("showrules2").appendChild(table);
      document.getElementById("showrules2").appendChild(document.createElement("br"));
      var h4 = document.createElement("h4");
      var outbound_rules = document.createTextNode("Outbound Rules");
      h4.appendChild(outbound_rules);
      document.getElementById("showrules2").appendChild(h4);
      for (var k = 0; k < sgs[j].IpPermissionsEgress.length; k++) {
      var port, source='', flag=0, protocol;
      protocol = sgs[j].IpPermissionsEgress[k].IpProtocol;
      if (sgs[j].IpPermissionsEgress[k].FromPort == sgs[j].IpPermissionsEgress[k].ToPort) {
      port = sgs[j].IpPermissionsEgress[k].FromPort;
      } else if (sgs[j].IpPermissionsEgress[k].FromPort != sgs[j].IpPermissionsEgress[k].ToPort) {
      port = sgs[j].IpPermissionsEgress[k].FromPort + " - " + sgs[j].IpPermissionsEgress[k].ToPort;
      } else {
      port = "ALL";
      }
      if (typeof sgs[j].IpPermissionsEgress[k].IpRanges[0] != 'undefined') {
      for (var l = 0; l < sgs[j].IpPermissionsEgress[k].IpRanges.length; l++) {
      source+= sgs[j].IpPermissionsEgress[k].IpRanges[l].CidrIp + ",";
      }
      }
      if (typeof sgs[j].IpPermissionsEgress[k].UserIdGroupPairs[0] != 'undefined') {
      for (var m = 0; m < sgs[j].IpPermissionsEgress[k].UserIdGroupPairs.length; m++) {
      source+= sgs[j].IpPermissionsEgress[k].UserIdGroupPairs[m].GroupId + ",";
      }
      }
      if (typeof port == 'undefined') {
      port = "ALL";
      }
      if (protocol == -1) {
      protocol = "ALL";
      }
      var charq = source.split('');
      charq[charq.length - 1] = "";
      source = charq.join("");
      // console.log("the k value ==" + k);
      var tr = document.createElement("tr");
      var column_no = 0;
      var porttd = document.createElement("td");
      porttd.appendChild(document.createTextNode(port));
      // porttd.setAttribute("rowspan", "2");
      tr.appendChild(porttd);
      var protocoltd = document.createElement("td");
      protocoltd.appendChild(document.createTextNode(protocol));
      // protocoltd.setAttribute("rowspan", "2");
      tr.appendChild(protocoltd);
      var sourcetd = document.createElement("td");
      sourcetd.appendChild(document.createTextNode(source));
      // sourcetd.setAttribute("rowspan", "2");
      tr.appendChild(sourcetd);
      tablebody1_out.appendChild(tr);
      // document.getElementById("showrules2").appendChild(document.createElement("br"));
      }
      table_out.appendChild(tablebody1_out);
      document.getElementById("showrules2").appendChild(table_out);
      }
      }
      }
    link(rel='stylesheet', type='text/css', href='stylesheets/bootstrap.css')
    // <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
  body(onload='getData()')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js')
    script(src='javascripts/bootstrap.js')
    // <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
    .container
      center
        h1  Choose the Configurations 
      br
      br
      .row
        center
          .col-sm-3
            label.control-label(for='worker')  No.of Worker Instances: 
          .col-sm-2
            input#count.form-control(type='textbox', placeholder='Worker')
      br
      br
      .row
        center
          .col-sm-3
            label.control-label(for='worker')  Select the VPC 
          .col-sm-2
            select#selectvpc.form-control(onchange='putCheckBox()')
      // <center> <h3> Select the Public Security Group </h3> </center>
      br
      .row
        #public.col-md-12
        #checkboxPopulate.col-md-3
        center
          #showrules.col-md-9.search-table-outer(style='overflow-x:scroll')
      br
      br
      // <center> <h3> Select the Private Security Group </h3> </center>
      br
      br
      .row
        #private.col-md-12
        #checkboxPopulate2.col-md-3.search-table-outer
        center
          #showrules2.col-md-9.search-table-outer(style='overflow-x:scroll')
      br
      br
      center
        button#stop.btn.btn-primary(onclick='postData()', type='button') Apply Changes
        button#stop.btn.btn-success(onclick='postDataScratch()', type='button') Deploy Scratch
      br
      br
      br
