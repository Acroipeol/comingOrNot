doctype html
html
  //
    purpose of the file:
    1. gives the status of automation both by text and visually
    2. by sockets, gets information instataneously from modrunplaybook
    author: Lakshman Diwaakar (fx30540)
    mail-id: Lakshman.Diwaakar@fujixerox.co.jp
  head
    script(src='http://ec2-54-64-42-105.ap-northeast-1.compute.amazonaws.com/socket.io/socket.io.js')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js')
    script(type='text/javascript').
      var canvas, context;
      var vpc_x, vpc_y, vpc_rect_width, vpc_rect_height;
      var pubsub_x, pubsub_y, pubsub_rect_width, pubsub_rect_height;
      var privsub_x, privsub_y, privsub_rect_width, privsub_rect_height;
      var sns_x, sns_y;
      var sqs_x, sqs_y;
      var worker_arr_x = [], worker_arr_y = [];
      var master_line_x, master_line_y;
      var count;
      function callCanvas(data){
      count = data.count;
      canvas = document.getElementById("archidraw");
      context = canvas.getContext("2d");
      vpc_x = 35, vpc_y = 32;
      vpc_rect_width = (canvas.width - 55);
      vpc_rect_height = (canvas.height - 70);
      pubsub_x = (vpc_x + 20);
      pubsub_y = (vpc_y + 30);
      pubsub_rect_width = (vpc_rect_width - 270);
      pubsub_rect_height = (vpc_rect_height - 370);
      privsub_x = (vpc_x + 20);
      privsub_y = (pubsub_rect_height + 90);
      privsub_rect_width = (vpc_rect_width - 170);
      privsub_rect_height = (vpc_rect_height - 290);
      var vpc_img,pubsub_img,privsub_img;
      // drawing the vpc!!!
      context.rect(vpc_x, vpc_y, vpc_rect_width, vpc_rect_height);
      context.stroke();
      // entering the name of the VPC
      context.fillText(data.vpcname_extract, (vpc_rect_width/2), 30);
      // VPC image rendering
      vpc_img = new Image();
      vpc_img.addEventListener("load", function() {
      context.drawImage(vpc_img, (vpc_rect_width - 100), 8);
      });
      vpc_img.src = "/images/vpc1.png";
      // public subnet
      context.rect(pubsub_x, pubsub_y, pubsub_rect_width, pubsub_rect_height);
      context.stroke();
      // entering the name of the subnets
      context.fillText(data.pubsub_extract, (pubsub_x + 15), (pubsub_y - 5));
      // adding pubsub image
      pubsub_img = new Image();
      pubsub_img.addEventListener("load", function() {
      context.drawImage(pubsub_img, (pubsub_rect_width - 10), (pubsub_y - 10));
      });
      pubsub_img.src = "/images/sub.png";
      // private subnet
      context.rect(privsub_x, privsub_y, privsub_rect_width, privsub_rect_height);
      context.stroke();
      // entering the name of the subnets
      context.fillText(data.privsub_extract, (privsub_x + 20), (privsub_y - 5));
      // adding privsub image
      privsub_img = new Image();
      pubsub_img.addEventListener("load", function() {
      context.drawImage(privsub_img, (privsub_rect_width - 10), (privsub_y - 10));
      });
      privsub_img.src = "/images/sub.png";
      }
      function callPage() {
      var socket;
      canvas = document.getElementById("archidraw");
      context = canvas.getContext("2d");
      // document.getElementById('fillin').value = "";
      var ran = "";
      var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
      for( var i=0; i < 5; i++ ) {
      ran += possible.charAt(Math.floor(Math.random() * possible.length));
      }
      console.log("coming here" + ran);
      socket = io.connect( !{url} + ran);
      socket.on('connect', function () {
      console.log("connected");
      });
      socket.on('subs', function(data) {
      console.log("data from subs" + JSON.stringify(data));
      // vpcdraw(data);
      // callCanvas(data);
      });
      socket.on('vpc', function(data) {
      console.log("data from vpc" + JSON.stringify(data));
      // vpcdraw(data);
      callCanvas(data);
      });
      socket.on('ipadd', function(data) {
      console.log("data from ipadd" + JSON.stringify(data));
      displayWorkerIpaddress(data);
      });
      socket.on('ipaddmaster', function(data) {
      console.log("data from ipaddmaster" + JSON.stringify(data));
      displayMasterIpaddress(data);
      });
      socket.on('ipaddreverse', function(data) {
      console.log("data from ipaddreverse" + JSON.stringify(data));
      displayReverseIpaddress(data);
      });
      socket.on('sec', function(data) {
      console.log("data from sec");
      securityGroups(data);
      });
      socket.on('worker', function(data) {
      console.log("data from worker");
      workerdraw(count);
      });
      socket.on('master', function(data) {
      console.log("data from master");
      masterdraw();
      });
      socket.on('reverse', function(data) {
      console.log("data from reverse");
      reverseproxydraw();
      });
      socket.on('snssqs', function(data) {
      console.log("data from snssqs");
      snssqs();
      });
      socket.on('workersub', function(data) {
      console.log("data from workersub");
      snsSubscriptionWorker();
      });
      socket.on('mastersub', function(data) {
      console.log("data from mastersub");
      snsSubscriptionMaster();
      });
      socket.on('s3', function(data) {
      console.log("data from s3");
      draws3();
      });
      socket.on('disconnect', function() {
      console.log("DISCONNECT");
      });
      socket.on("datasend", function(data) {
      buffer += data;
      document.getElementById('fillin').value += data;
      document.getElementById('fillin').scrollTop = document.getElementById('fillin').scrollHeight;
      // console.log(data);
      });
      socket.on("endpa", function(data) {
      socket.disconnect();
      console.log("endpa");
      });
      var xhr = new XMLHttpRequest();
      var url = !{url} + "/modrunplaybook?nameran=" + ran;
      xhr.open("GET", url, true);
      xhr.send();
      }
      // document.getElementById('fillin').value = " ";
      var buffer = "";
      function vpcdraw() {
      console.log("callling another listener");
      // console.log(t);
      console.log(" dzvsadg  "+ vpc_x);
      }
      function securityGroups(data) {
      // entering the name of pubsub
      context.fillText(data.pub_sg, (pubsub_x + 110), (pubsub_y - 5));
      // entering the name of priv sub
      context.fillText(data.priv_sg, (privsub_x + 160), (privsub_y - 5));
      }
      function workerdraw(count) {
      // canvas = document.getElementById("canvas");
      // context = canvas.getContext("2d");
      var partition = ( privsub_rect_height / count);
      for (var i = 0; i < count; i++) {
      var img_similar_y = (partition * (i +1));
      worker_arr_x[i] = (privsub_x + 170);
      worker_arr_y[i] = (((privsub_y + img_similar_y) - partition) + 10);
      (function (_i) {
      var img_y = (partition * (i +1));
      var worker_img = new Image();
      worker_img.addEventListener("load", function() {
      context.drawImage(worker_img, (privsub_x + 170), (((privsub_y + img_y) - partition) + 10));
      });
      worker_img.src = "/images/worker.png";
      })(i);
      }
      }
      function masterdraw() {
      master_line_x = (privsub_x + 25);
      master_line_y = (privsub_y + (privsub_rect_height/2) - 40);
      console.log(master_line_x + "    " + master_line_y);
      // draw master
      var master_img = new Image();
      master_img.addEventListener("load", function() {
      context.drawImage(master_img, master_line_x, master_line_y);
      });
      master_img.src = "/images/master.png";
      }
      function reverseproxydraw() {
      // draw NAT
      console.log("reverse");
      var nat_img = new Image();
      nat_img.addEventListener("load", function() {
      context.drawImage(nat_img, (pubsub_x + 115), (pubsub_y + 40));
      });
      nat_img.src = "/images/nat.png";
      }
      function snssqs() {
      sns_x = (vpc_rect_width - 100);
      sns_y = (pubsub_y + 25);
      sqs_x = (vpc_rect_width - 80);
      sqs_y = (privsub_y + 100);
      var sns_img = new Image();
      sns_img.addEventListener("load", function() {
      context.drawImage(sns_img, sns_x, sns_y);
      });
      sns_img.src = "/images/sns.png";
      var sqs_img = new Image();
      sqs_img.addEventListener("load", function() {
      context.drawImage(sqs_img, sqs_x, sqs_y);
      });
      sqs_img.src = "/images/sqs.png";
      context.beginPath();
      context.moveTo(sns_x + 60, sns_y + 50);
      context.lineTo(sqs_x + 50, sqs_y );
      context.stroke();
      }
      function snsSubscriptionWorker() {
      for (var i = 0; i < worker_arr_x.length; i++) {
      context.beginPath();
      context.moveTo(worker_arr_x[i] + 78, worker_arr_y[i] + 50);
      context.lineTo(sns_x + 10, sns_y + 60);
      context.stroke();
      }
      }
      function displayWorkerIpaddress(s) {
      for (var i = 0; i < worker_arr_x.length; i++) {
      context.fillText(s[i], (worker_arr_x[i] + 10), (worker_arr_y[i]+100));
      }
      }
      function displayMasterIpaddress(s) {
      context.fillText(s, ((privsub_x + 25) + 10), ((privsub_y + (privsub_rect_height/2) - 40) + 100));
      }
      function displayReverseIpaddress(s) {
      context.fillText(s, ((pubsub_x + 115) + 10), ((pubsub_y + 40) + 100));
      }
      function snsSubscriptionMaster() {
      context.beginPath();
      context.moveTo(master_line_x + 78, master_line_y + 50);
      context.lineTo(sns_x + 10, sns_y + 60);
      context.stroke();
      }
      function draws3() {
      var s3_x = (privsub_rect_width - 35);
      var s3_y = (privsub_y + 100);
      var s3_img = new Image();
      s3_img.addEventListener("load", function() {
      context.drawImage(s3_img, s3_x, s3_y);
      });
      s3_img.src = "/images/s3.png";
      for (var i = 0; i < worker_arr_x.length; i++) {
      context.beginPath();
      context.moveTo(worker_arr_x[i] + 78, worker_arr_y[i] + 55);
      context.lineTo(s3_x + 10, s3_y + 40);
      context.stroke();
      }
      }
    meta(charset='UTF-8')
    link(rel='stylesheet', type='text/css', href='stylesheets/bootstrap.css')
    script(src='javascripts/bootstrap.js')
  body(background='/images/bg.jpg', onload='callPage()')
    header
      center
        h1 Status of new Worker execution
    .row
      .col-md-6
        // <button onclick="callPage()" class="button" type="button" id="stop" >Submit</button>
        textarea#fillin(rows='31', cols='92', style='border:double 3px orange', disabled='', readonly='')  
      #parent.col-md-6
        canvas#archidraw(width='600', height='650')
